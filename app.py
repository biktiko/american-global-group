import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import asyncio
import logging
import os
from dotenv import load_dotenv
import psycopg2
from urllib.parse import urlparse
from messages_file import MESSAGES
import queries
import time
import re

# 1) –ó–∞–≥—Ä—É–∑–∫–∞ env
load_dotenv()
TIMEZONE = os.getenv("TIMEZONE", "UTC")
os.environ["TZ"] = TIMEZONE
try:
    time.tzset()
except AttributeError:
    pass

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    logging.error("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

# 2) –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL
result = urlparse(DATABASE_URL)

# 3) –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Postgres
conn = psycopg2.connect(
    dbname=result.path.lstrip("/"),
    user=result.username,
    password=result.password,
    host=result.hostname,
    port=result.port,
    sslmode="require"
)
conn.autocommit = True
cur = conn.cursor()
cur.execute(f"SET TIME ZONE '{TIMEZONE}'")
# 4) –°–æ–∑–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cur.execute(queries.CREATE_USERS_TABLE)

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cur.execute(queries.CREATE_LOGS_TABLE)

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
cur.execute(queries.CREATE_BROADCASTS_TABLE)
cur.execute(queries.CREATE_ADMINS_TABLE)

def save_user_db(user, phone=None, language=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç username/–∏–º—è/—Ñ–∞–º–∏–ª–∏—é/—Ç–µ–ª–µ—Ñ–æ–Ω –∏ last_seen_at.
    """
    cur.execute(
        queries.INSERT_USER,
        (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            phone,
            language,
        ),
    )
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É logs
def log_action(user_id, action, details=None):
    try:
        cur.execute(
            queries.INSERT_LOG,
            (user_id, action, details),
        )
        conn.commit()
        logger.info(f"User {user_id}: {action} {details if details else ''}")
    except Exception as e:
        logger.error(f"Failed to log action '{action}' for user {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
def save_broadcast(admin_id, recipients, message_hy=None, message_en=None):
    try:
        cur.execute(
            queries.INSERT_BROADCAST,
            (admin_id, message_hy, message_en, recipients),
        )
        conn.commit()
        logger.info(f"Broadcast by {admin_id}: hy='{message_hy}' en='{message_en}' to {recipients}")
    except Exception as e:
        logger.error(f"Failed to save broadcast by {admin_id}: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

import base64

# –ü–æ–ª—É—á–µ–Ω–∏–µ credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
credentials_base64 = os.getenv("GOOGLE_CREDENTIALS")
if not credentials_base64:
    logger.error("GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
with open("credentials.json", "wb") as f:
    f.write(base64.b64decode(credentials_base64))

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google
credentials_path = 'credentials.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
creds = Credentials.from_service_account_file(
    credentials_path, scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
client = gspread.authorize(creds)

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã Google Sheets
files = {
    "Air AM to USA": {"id": "1V8foxDTTOXzzw0dnJ3TIIjWrQHSU-oGOD0nRrDn3By8", "sheet": "List"},
    "Air USA to AM": {"id": "181OmCbyhfun3SdmQe7KPvlKpNnnLcl1aVzP7A2eYgSc", "sheet": "Sheet1"},
    "Ocean USA to AM": {"id": "1svNBQ6UtvR5jLsJJNDCx1YpCMfL4YB70sXz9lz9rJ18", "sheet": "Data"}
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_choices = {}
user_languages = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —è—á–µ–π–∫–∞–º
def get_cell(row, index):
    return row[index].strip() if len(row) > index else ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def get_social_links_keyboard():
    buttons = [
        InlineKeyboardButton("üìò Facebook", url="https://www.facebook.com/AGGArmenia"),
        InlineKeyboardButton("üì∏ Instagram", url="https://www.instagram.com/americanglobalgroup_"),
        InlineKeyboardButton("üåê Website", url="https://AmericanGlobalGroup.com")
    ]
    return InlineKeyboardMarkup([buttons])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def get_contact_info():
    contact_text = (
        "üìû Armenia: +374 43 33 44 44\n"
        "üìû USA: +1 424 333-4444\n"
    )
    return contact_text

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton(MESSAGES["languages"]["hy"], callback_data="set_lang_hy")],
        [InlineKeyboardButton(MESSAGES["languages"]["en"], callback_data="set_lang_en")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(MESSAGES["language_prompt"]["hy"], reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
async def handle_set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = "hy" if query.data == "set_lang_hy" else "en"
    user_languages[user_id] = lang
    save_user_db(query.from_user, language=lang)
    log_action(user_id, 'set_language', lang)
    await query.message.reply_text(MESSAGES["language_set"][lang])

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cur.execute("SELECT language FROM users WHERE user_id=%s", (user.id,))
    row = cur.fetchone()
    lang = row[0] if row else "hy"
    user_languages[user.id] = lang

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —è–∑—ã–∫
    save_user_db(user, language=lang)
    log_action(user.id, 'start')
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    keyboard = [
        [InlineKeyboardButton(MESSAGES["route_names"]["Air AM to USA"][lang], callback_data="Air AM to USA")],
        [InlineKeyboardButton(MESSAGES["route_names"]["Air USA to AM"][lang], callback_data="Air USA to AM")],
        [InlineKeyboardButton(MESSAGES["route_names"]["Ocean USA to AM"][lang], callback_data="Ocean USA to AM")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"{MESSAGES['start'][lang]}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def handle_direction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    direction = query.data
    user_choices[user_id] = direction
    lang = user_languages.get(user_id, "hy")
    route_message = MESSAGES["where_to_find"].get(direction, {}).get(lang, "Error")
    log_action(user_id, 'choose_direction', direction)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "Where to Find"
    keyboard = [
        [InlineKeyboardButton(MESSAGES["where_to_find_button"][lang], callback_data="where_to_find")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    template_example = direction
    if direction == "Air AM to USA":
        template_example = "10500009346"
    elif direction == "Air USA to AM":
        template_example = "AM00017664US"
    elif direction == "Ocean USA to AM":
        template_example = "AM00017664US"

    logger.info(f"User {user_id} chose direction {direction}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    await query.message.reply_text(
        f"{MESSAGES['enter_waybill'][lang]}{template_example}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Change Direction"
async def handle_change_direction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = user_languages.get(user_id, "hy")
    log_action(user_id, 'change_direction')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton(MESSAGES["route_names"]["Air AM to USA"][lang], callback_data="Air AM to USA")],
        [InlineKeyboardButton(MESSAGES["route_names"]["Air USA to AM"][lang], callback_data="Air USA to AM")],
        [InlineKeyboardButton(MESSAGES["route_names"]["Ocean USA to AM"][lang], callback_data="Ocean USA to AM")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await query.message.reply_text(
        MESSAGES["choose_route"][lang],
        reply_markup=reply_markup
    )

# –õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def extract_data(route, row, lang):
    response = ""
    try:
        parcel_status_translations = MESSAGES["parcel_status_translations"]

        if route == "Air AM to USA":
            # Column indices (0-based): B=1, C=2, V=21, Z=25, Y=24, AA=26, AB=27
            order_date = get_cell(row, 2)
            home_delivery_value = get_cell(row, 21)
            try:
                if int(home_delivery_value) > 0:
                    home_delivery = MESSAGES["home_delivery_ordered"][lang]
                else:
                    home_delivery = MESSAGES["home_delivery_not_ordered"][lang]
            except ValueError:
                home_delivery = MESSAGES["home_delivery_not_ordered"][lang]

            parcel_status = get_cell(row, 25)
            estimated_delivery = get_cell(row, 24)
            aa = get_cell(row, 26).lower()
            ab = get_cell(row, 27)
            ac = get_cell(row, 28)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
            parcel_status_en = parcel_status_translations[route].get(parcel_status, parcel_status)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            response += f"{MESSAGES['order_date'][lang]}: {order_date}\n"
            response += f"{home_delivery}\n"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ AA
            if aa in ['true', 'yes', '1', '‚úì']:
                response += f"{MESSAGES['received_by_customer'][lang]}: {ab}\n" if ab else f"{MESSAGES['received_by_customer'][lang]}:\n"
            else:
                status = parcel_status if lang == "hy" else parcel_status_en
                response += f"{MESSAGES['parcel_status'][lang]}: {status}\n"
                response += f"{MESSAGES['estimated_delivery_date_usa_office'][lang]}: {estimated_delivery}\n"
            
            if len(ac)>0:
                response += f"\n{ac}\n"
            
        elif route == "Air USA to AM":
            # Column indices: B=1, C=2, R=17, V=21, U=20, X=23
            order_date = get_cell(row, 2)
            home_delivery_value = get_cell(row, 17)
            try:
                if int(home_delivery_value) > 0:
                    home_delivery = MESSAGES["home_delivery_ordered"][lang]
                else:
                    home_delivery = MESSAGES["home_delivery_not_ordered"][lang]
            except ValueError:
                try:
                    if home_delivery_value.upper() == "YES":
                        home_delivery = MESSAGES["home_delivery_ordered"][lang]
                    else:
                        home_delivery = MESSAGES["home_delivery_not_ordered"][lang]
                except Exception as e:
                    home_delivery = MESSAGES["home_delivery_not_ordered"][lang]


            parcel_status = get_cell(row, 21)
            estimated_delivery = get_cell(row, 20)
            x = get_cell(row, 23).lower()
            y = get_cell(row, 24)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
            parcel_status_en = parcel_status_translations[route].get(parcel_status, parcel_status)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            response += f"{MESSAGES['order_date'][lang]}: {order_date}\n"
            response += f"{home_delivery}\n"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ X
            if x in ["yes", "true", "1", "‚úì"]:
                response += f"{MESSAGES['received_by_customer'][lang]}:\n"
            else:
                status = parcel_status if lang == "hy" else parcel_status_en
                response += f"{MESSAGES['parcel_status'][lang]}: {status}\n"
                response += f"{MESSAGES['estimated_delivery_date_am_office'][lang]}: {estimated_delivery}\n"

            if len(y)>0:
                response += f"\n{y}\n"
            
        elif route == "Ocean USA to AM":
            # Column indices: B=1, C=2, Q=16, AC=28, AB=27, AE=30
            order_date = get_cell(row, 2)
            home_delivery_value = get_cell(row, 16)
            try:
                if int(home_delivery_value) > 0:
                    home_delivery = MESSAGES["home_delivery_ordered"][lang]
                else:
                    home_delivery = MESSAGES["home_delivery_not_ordered"][lang]
            except ValueError:
                try:
                    if home_delivery_value.upper() == "YES":
                        home_delivery = MESSAGES["home_delivery_ordered"][lang]
                    else:
                        home_delivery = MESSAGES["home_delivery_not_ordered"][lang]
                except Exception as e:
                    home_delivery = MESSAGES["home_delivery_not_ordered"][lang]


            parcel_status = get_cell(row, 28)
            estimated_delivery = get_cell(row, 27)
            ae = get_cell(row, 30).lower()
            ag = get_cell(row, 32)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
            parcel_status_en = parcel_status_translations[route].get(parcel_status, parcel_status)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
            response += f"{MESSAGES['order_date'][lang]}: {order_date}\n"
            response += f"{home_delivery}\n"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ AE
            if ae in ["yes", "true", "1", "‚úì"]:
                response += f"{MESSAGES['received_by_customer'][lang]}:\n"
            else:
                status = parcel_status if lang == "hy" else parcel_status_en
                response += f"{MESSAGES['parcel_status'][lang]}: {status}\n"
                response += f"{MESSAGES['estimated_delivery_date_am_office'][lang]}: {estimated_delivery}\n"
            
            if len(ag)>0:
                response += f"\n{ag}\n"

        else:
            response = MESSAGES["unsupported_route"]["hy"]
            return response, None
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        contact_info = get_contact_info()
        response += f"\n{contact_info}"
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        social_keyboard = get_social_links_keyboard()

    except IndexError as ie:
        logger.error(f"IndexError: {ie} for route {route} and row {row}")
        response = MESSAGES["error"][lang]
        social_keyboard = None
    except ValueError as ve:
        logger.error(f"ValueError: {ve} for route {route} and row {row}")
        response = MESSAGES["error"][lang]
        social_keyboard = None
    except Exception as e:
        logger.error(f"Unexpected error: {e} for route {route} and row {row}")
        response = f"{MESSAGES['error'][lang]} {e}"
        social_keyboard = None

    return response, social_keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def broadcast_message(application, messages_by_lang, user_ids, image_url=None):
    for uid in user_ids:
        lang = user_languages.get(uid, "hy")
        text = messages_by_lang.get(lang) or messages_by_lang.get("hy") or next(iter(messages_by_lang.values()))
        try:
            if image_url:
                await application.bot.send_photo(chat_id=uid, photo=image_url, caption=text)
            else:
                await application.bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
async def broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
    cur.execute("SELECT admin_id FROM admins")
    admin_ids = [r[0] for r in cur.fetchall()]
    if user_id not in admin_ids:
        await update.message.reply_text(MESSAGES["no_permission"]["hy"], parse_mode='HTML')
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    full_text = update.message.text or ""
    parts = full_text.split(' ', 1)
    if len(parts) < 2 or not parts[1].strip():
        await update.message.reply_text(MESSAGES["specify_broadcast_text"]["hy"], parse_mode='HTML')
        return
    args_text = parts[1]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ids=
    ids = []
    m_ids = re.search(r'\bids\s*=\s*([\d,]+)', args_text, re.IGNORECASE)
    if m_ids:
        ids = [int(x) for x in m_ids.group(1).split(',') if x]
        args_text = re.sub(r'\bids\s*=\s*[\d,]+', '', args_text, flags=re.IGNORECASE)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = None
    m_url = re.search(r'(https?://\S+)', args_text)
    if m_url:
        image_url = m_url.group(1)
        args_text = args_text.replace(image_url, '')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    percent = None
    m_pct = re.search(r'(\d{1,3})\s*%', args_text)
    if m_pct:
        percent = int(m_pct.group(1))
        args_text = args_text.replace(m_pct.group(0), '')

    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —è–∑—ã–∫–∞–º
    messages_by_lang = {}
    # hy:
    m_hy = re.search(r'hy:(.*?)(?=(\|en:|$))', args_text, re.DOTALL | re.IGNORECASE)
    if m_hy:
        messages_by_lang['hy'] = m_hy.group(1).strip()
    # en:
    m_en = re.search(r'en:(.*?)(?=(\|hy:|$))', args_text, re.DOTALL | re.IGNORECASE)
    if m_en:
        messages_by_lang['en'] = m_en.group(1).strip()

    # –õ—é–±–æ–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ default_message
    default_message = None
    leftover = re.sub(r'(hy:.*?)(?=(\|en:|$))', '', args_text, flags=re.DOTALL | re.IGNORECASE)
    leftover = re.sub(r'(en:.*?)(?=(\|hy:|$))', '', leftover, flags=re.DOTALL | re.IGNORECASE)
    leftover = leftover.replace('|', '').strip()
    if leftover:
        default_message = leftover

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º default –¥–ª—è –æ–±–æ–∏—Ö
    if not messages_by_lang:
        if default_message is None:
            await update.message.reply_text(MESSAGES["specify_broadcast_text"]["hy"], parse_mode='HTML')
            return
        messages_by_lang = {'hy': default_message, 'en': default_message}
    else:
        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —è–∑—ã–∫
        for lang in ('hy', 'en'):
            if lang not in messages_by_lang:
                messages_by_lang[lang] = default_message or next(iter(messages_by_lang.values()))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    if percent is not None and (percent <= 0 or percent > 100):
        await update.message.reply_text(MESSAGES["broadcast_invalid_percent"]["hy"], parse_mode='HTML')
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —è–∑—ã–∫–∏
    cur.execute("SELECT user_id, language FROM users ORDER BY last_seen_at DESC")
    rows = cur.fetchall()
    all_users = [r[0] for r in rows]
    db_langs = {r[0]: r[1] for r in rows}
    user_languages.update(db_langs)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ids, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if ids:
        recipients_ordered = [uid for uid in all_users if uid in ids]
        if not recipients_ordered:
            await update.message.reply_text(MESSAGES["broadcast_invalid_ids"]["hy"], parse_mode='HTML')
            return
    else:
        recipients_ordered = all_users

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
    if percent is not None:
        k = max(1, int(len(recipients_ordered) * percent / 100))
        recipients = recipients_ordered[:k]
    else:
        recipients = recipients_ordered

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏ –ª–æ–≥–∏—Ä—É–µ–º
    save_broadcast(user_id, recipients, messages_by_lang.get('hy'), messages_by_lang.get('en'))
    log_action(user_id, 'broadcast', f"{messages_by_lang} -> {recipients}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await broadcast_message(context.application, messages_by_lang, recipients, image_url=image_url)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
    await update.message.reply_text(MESSAGES["broadcast_done"]["hy"], parse_mode='HTML')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
async def set_bot_commands(application):
    commands = [
        BotCommand("start", "Start the bot"),
        BotCommand("setlanguage", "Change the language"),
        BotCommand("broadcast", "Broadcast a message to all users"),
        BotCommand("sharecontact", "Share your phone number")
    ]
    await application.bot.set_my_commands(commands)

async def share_contact_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    user_id = update.message.from_user.id
    lang = user_languages.get(user_id, "hy")
    log_action(user_id, 'share_contact_request')

    kb = [
        [ KeyboardButton(MESSAGES['share'][lang], request_contact=True) ]
    ]

    reply_markup = ReplyKeyboardMarkup(
        kb,
        one_time_keyboard=True,
        resize_keyboard=True
    )
   
    await update.message.reply_text(
        MESSAGES['share_phone'][lang],
        reply_markup=reply_markup
    )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contact = update.message.contact
    user = update.effective_user
    save_user_db(user, phone=contact.phone_number)
    log_action(user.id, 'share_contact', contact.phone_number)
    # —É–¥–∞–ª—è–µ–º custom-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º commands-menu
    await update.message.reply_text(
        MESSAGES["contact_saved"]["hy"],
        reply_markup=ReplyKeyboardRemove()
    )

async def prompt_phone_if_needed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."""
    user_id = update.message.from_user.id
    cur.execute("SELECT phone_number FROM users WHERE user_id=%s", (user_id,))
    row = cur.fetchone()
    phone = row[0] if row else None
    if not phone:
        await share_contact_request(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ waybill –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def handle_waybill(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    lang = user_languages.get(user_id, "hy")
    direction = user_choices.get(user_id)
    log_action(user_id, 'enter_waybill', update.message.text.strip())

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction_keyboard = [
        [InlineKeyboardButton(MESSAGES["route_names"]["Air AM to USA"][lang], callback_data="Air AM to USA")],
        [InlineKeyboardButton(MESSAGES["route_names"]["Air USA to AM"][lang], callback_data="Air USA to AM")],
        [InlineKeyboardButton(MESSAGES["route_names"]["Ocean USA to AM"][lang], callback_data="Ocean USA to AM")],
    ]
    direction_reply_markup = InlineKeyboardMarkup(direction_keyboard)

    if not direction:
        # –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        await update.message.reply_text(
            MESSAGES["select_waybill_first"][lang],
            reply_markup=direction_reply_markup
        )
        return

    waybill = update.message.text.strip()
    file_info = files.get(direction)

    if not file_info:
        await update.message.reply_text(
            MESSAGES["route_not_active"][lang]
        )
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
    sheet_id = file_info["id"]
    sheet_name = file_info["sheet"]

    try:
        sheet = client.open_by_key(sheet_id).worksheet(sheet_name)
        data = sheet.get_all_values()

        headers = data[0]  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        rows = data[1:]    # –î–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

        # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞ "waybill"
        waybill_index = headers.index("waybill") if "waybill" in headers else None
        if waybill_index is None:
            await update.message.reply_text(
                MESSAGES["missing_waybill_column"][lang]
            )
            return

        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º waybill
        found = False
        for row in rows:
            if len(row) > waybill_index and row[waybill_index].strip() == waybill:
                result, buttons = extract_data(direction, row, lang)
                if buttons:
                    await update.message.reply_text(result, reply_markup=buttons, parse_mode='HTML')
                else:
                    await update.message.reply_text(result, parse_mode='HTML')
                found = True
                break

        # –ï—Å–ª–∏ waybill –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not found:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if direction in MESSAGES["route_names"]:
                display_name = MESSAGES["route_names"][direction][lang]
            else:
                display_name = MESSAGES["route_names"]["unknown"][lang]

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            selected_direction_message = (
                f"{MESSAGES['selected_direction'][lang]}{display_name}\n\n"
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "not_found"
            not_found_message = MESSAGES['not_found'][direction][lang]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "choose direction again"
            choose_direction_message = MESSAGES["change_direction"][lang]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            contact_info = get_contact_info()

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            full_message = (
                f"{not_found_message}\n\n"
                f"{contact_info}\n"
                f"{selected_direction_message}"
                f"{choose_direction_message}"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await update.message.reply_text(
                full_message,
                reply_markup=direction_reply_markup
            )

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        await prompt_phone_if_needed(update, context)

    except Exception as e:
        logger.error(f"Error processing waybill for user {user_id}: {e}")
        await update.message.reply_text(
            f"{MESSAGES['error'][lang]} {e}"
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Where to Find"
async def handle_where_to_find(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    direction = user_choices.get(user_id)
    lang = user_languages.get(user_id, "hy")
    log_action(user_id, 'where_to_find')
    if direction:
        message = MESSAGES["where_to_find"].get(direction, {}).get(lang, "Error")
        await query.message.reply_text(message)
    else:
        await query.message.reply_text(
            MESSAGES["select_waybill_first"][lang]
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–º–∞–Ω–¥
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setlanguage", set_language))
    application.add_handler(CommandHandler("sharecontact", share_contact_request))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_waybill))
    application.add_handler(CallbackQueryHandler(handle_set_language, pattern="^set_lang_"))
    application.add_handler(CallbackQueryHandler(handle_direction, pattern="^(Air AM to USA|Air USA to AM|Ocean USA to AM)$"))
    application.add_handler(CallbackQueryHandler(handle_where_to_find, pattern="^where_to_find$"))
    application.add_handler(CallbackQueryHandler(handle_change_direction, pattern="^change_direction$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_waybill))
    application.add_handler(CommandHandler("broadcast", broadcast_handler))  

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(set_bot_commands(application))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()